{"_id":"9ercEKLOW7H6ivxd","name":"Timer","permission":{"default":0,"6V6CmwaXNn2ou2Rj":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"let seconds_selected = 0;\nlet seconds_left = 0;\n\nlet times = {\n  buttons : [\n    [\"1 Min\", ()=> { seconds_selected = seconds_left = 60; update_dialog();}],\n    [\"5 Min\", ()=> { seconds_selected = seconds_left = 300; update_dialog();}],\n    [\"10 Min\", ()=> { seconds_selected = seconds_left = 600; update_dialog(); }],\n    [\"15 Min\", ()=> { seconds_selected = seconds_left = 900; update_dialog(); }],\n    [\"20 Min\", ()=> { seconds_selected = seconds_left = 1200; update_dialog(); }],\n    [\"30 Min\", ()=> { seconds_selected = seconds_left = 1800; update_dialog(); }]\n  ],\n  content : `<div sytle=\"width:100%; text-align:center;\"><h2> Choose a timer limit : </h2></div>`,\n  title : `Timer Selector`\n};\n\nasync function button_dialog(data)\n{\n  let value = await new Promise((resolve) => {\n    let buttons = {}, dialog;\n\n    data.buttons.forEach(([str, callback])=>{\n      buttons[str] = {\n        label : str,\n        callback\n      }\n    });\n  \n    dialog = new Dialog({title : data.title , content : data.content, buttons, close : () => resolve(true) }).render(true);\n  });\n  return value;\n}\n\nasync function update_dialog()\n{\n  let interval, content, buttons, dialog, interval_time;\n\n  interval_time = 1;\n  content = getContent();\n  buttons = getButtons();\n\n  dialog = new Dialog({ title : `Timer`, content, buttons, close : () =>  { clearInterval(interval); }}, {width : 200 }).render(true);\n\n  console.log(dialog);\n\n  interval = setInterval(()=> {\n    update();\n  }, interval_time * 1000);\n\n  function getContent()\n  {\n\n    if(seconds_left !== 0 )\n    {\n      let minutes = Math.floor(seconds_left/60);\n      let seconds = seconds_left%60;\n  \n      if (minutes < 10) minutes = `0${minutes}`;\n      if (seconds < 10) seconds = `0${seconds}`;\n\n      return `<div sytle=\"width:100%; text-align:center;\"><h1>${minutes}:${seconds}</h1></div>`;\n    }else{\n      if(dialog.data.content.includes(`Complete`))\n      {\n        return ``;\n      }else{\n        return `<div sytle=\"width:100%; text-align:center; color:red;\"><h1>Complete</h1></div>`;\n      }\n    }\n  }\n  function getButtons()\n  {\n    return {\n      Restart : { label : `Restart`, callback : () => { seconds_left = seconds_selected; update_dialog(); }},\n      Cancel : { label : `Cancel`, callback : () => { clearInterval(interval); }}\n    };\n  }\n  function update()\n  {\n    if(seconds_left !== 0) seconds_left--;\n\n    dialog.data.content = getContent();\n    dialog.render(true);\n  }\n}\n\nbutton_dialog(times);","author":"6V6CmwaXNn2ou2Rj","img":"icons/svg/clockwork.svg","actorIds":[]}
{"_id":"CCaNXMoQznT17Dt0","name":"OOC","permission":{"default":0,"6V6CmwaXNn2ou2Rj":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"/*\n  Send to OOC Chat\n*/\n\n(async ()=>{\n  let content = await getContent();\n\n  if(!content) return;\n\n  ChatMessage.create({\n    content,\n    speaker : ChatMessage.getSpeaker({alias : game.user.name }),\n    type : 1,\n  });\n})();\n\nasync function getContent()\n{\n  let value = await new Promise((resolve)=>{\n    new Dialog({\n      title : `OOC Chat Dialog`, \n      buttons : { OK : {label : `Ok`, callback : (html)=> { const val = html.find('[name=content]')[0]?.value; resolve(val);}}},\n      content : `\n      <div class=\"form-group\" style=\"display:flex\">\n        <div> <textarea name=\"content\" rows=\"4\" style=\"width: 380px\"></textarea> </div>\n      </div>\n      <br>`\n    }).render(true);\n\n  });\n  return value;\n}","author":"6V6CmwaXNn2ou2Rj","img":"icons/svg/dice-target.svg","actorIds":[]}
